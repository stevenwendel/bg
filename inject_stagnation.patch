diff --git a/main.py b/main.py
index 48f659e..d737e41 100755
--- a/main.py
+++ b/main.py
@@ -27,7 +27,7 @@ def main():
     start_time = time.time()
     print(f"Initial memory usage: {get_memory_usage():.2f} MB")
 
-    ga_set = "E"
+    ga_set = "F"
     ### Settings ###
     os.makedirs('./data', exist_ok=True)
     save_path = f'./data/{ga_set}_{datetime.now().strftime("%Y-%m-%d_%H-%M-%S")}.pkl'
@@ -60,6 +60,13 @@ def main():
     threshold_score = max_score * PERFORMANCE_THRESHOLD
     print(f'{max_score=} {threshold_score=}')
     restart_count = 0
+
+    # ---------- stagnation tracking --------------------------------------
+    best_score_history = []
+    no_improvement_count = 0
+    PATIENCE = 15           # generations to wait before injecting DNA
+    MIN_IMPROVEMENT = 1e-3  # what counts as "better"
+
     while restart_count < MAX_RESTARTS:
         print(f"\nStarting run {restart_count + 1} of {MAX_RESTARTS}")
         
@@ -113,6 +120,42 @@ def main():
                 pool.join()
                 raise
 
+            # -------------------------------------------------------------
+            # 1️⃣  Track best score & stagnation
+            # -------------------------------------------------------------
+            scores = [p["dna_score"] for p in population_results]
+            best_score = max(scores)
+
+            best_score_history.append(best_score)
+            if len(best_score_history) > 5:
+                recent   = best_score_history[-5:]
+                improve  = best_score - min(recent[:-1])
+                if improve < MIN_IMPROVEMENT:
+                    no_improvement_count += 1
+                else:
+                    no_improvement_count  = 0
+            else:
+                no_improvement_count = 0
+
+            # -------------------------------------------------------------
+            # 2️⃣  Inject fresh DNA when stuck
+            # -------------------------------------------------------------
+            if no_improvement_count >= PATIENCE:
+                print(
+                    f"⚠️  No score improvement for {PATIENCE} generations "
+                    "- injecting fresh DNA."
+                )
+                from src.genetic_algorithm import rescue_population_by_stagnation
+                curr_population = [
+                    {"dna": dna, "dna_score": None}
+                    for dna in rescue_population_by_stagnation(
+                        population_results,
+                        GA_CONFIG[ga_set],
+                    )
+                ]
+                no_improvement_count = 0
+                continue   # skip normal spawn & go to next generation
+
             # Quick save to temp dict (repository for all dna across all generations)   
             save_dict[f'gen_{generation}'] = {
                 'population': population_results,
diff --git a/src/constants.py b/src/constants.py
index a48272a..9218e6d 100755
--- a/src/constants.py
+++ b/src/constants.py
@@ -289,11 +289,11 @@ GA_CONFIG = { # I should store these configurations in the pkl file itself as a
 
      "F":   {
         "NUM_GENERATIONS" : 300,
-        "POP_SIZE" : 3000,
+        "POP_SIZE" : 10,
         "MUT_RATE" : 0.5,
         "MUT_SIGMA" : .5,
         "RANK_DEPTH" : 1000,
-        "ELITE_SIZE" : 10,
+        "ELITE_SIZE" : 1,
         "CROSSOVER_POINT" : None,
         "DNA_BOUNDS" : [0,1000], 
         "TIME_TAKEN" : 620# 10.5 hr
